<metadata>
19259aa59ce4462bdbb7a686daac583d1466b5c6fc95204fc7a9a5988fad122398b6d1e1f9db95b50461cea0c6a5f59aa8cccca5355b91f69ea3b391493c94e086e0341994ac6745f0cf5c62330f422f5f309cf895e0492583e6220296e01075f486ccbf147d9cf38de3033ef3d1b2832e007a4a7f5d2f11162adbb5f899bed3ec898ab42f6ef4908aeb186827533a53a4d2ceaba4843567dabf137fd2b3becaaac393e50a6fc2e24714334789fbc4a129474f282c44f1852404b5fc6b051e7a3a5f740ca69a1e31fc923150e5887b1e526c152955214138c8b80c69fdc3c980f896f692244d20432746c1b5d0bf30428bb7e4cb3d49bbc25424a9cc714fe9d5caa66b0a6608d4b396e3e08150371772625c1c512776a5e91226ffc3c7e8b0dc0564adc38aed0471cfaea7c0563396a8774b39580c79b2c66f07aac58af8a09ee5d9654af190d8ad1460670ff49b6715645ae5d986e59bf4533ea5d57a1b9cf29be2556b615d4f60beddb2dd4a2794e4b7d6315f1e67b58b3b071370046bfb963a57b3d67e10aeda4033043a327b26550727b9d83616bed3b6d94c3e0c6955755a3ce98587e2e29a0168fa98d3bf9efb0323dcaab7d67301cfa67110630d9de94e6e204ffa9c476797c55a3fd3bfc9a89bef61084e386005e6c601527f0bea9891f49ff1294ef581e48cefcf672ed0be72167613cfb7bb874d621a79c2ad7a17a7ca492c0b65fe8ad3a03c0292ae98fbabc44a3ad3aa2d5f365fddba5c34a4d0ec9f003e300c9cb3a3c0e48b2c5ce49d5321b4dd3651d9b1f3874b387b4549753d5940214d39ff9aa4eb197fb5f680f226433051cfbb3b524b24a3cd605e6a5be8decbe5d6e71123436dcaf865550f3ff7cefac64669a5c1d1b088fc1174c38c95f376357406583de081ec988ae3701f284627194c700a6fb6ce7a0a3d7933520b7f90f5efd190a07e4f0c2238086e5fe5cbc8f8faca1525271609356e412045a4dc5f2f195d8cedb3c74520e6d879457202a6c7a8db2053f0878be40270a0c4724c2a166e41caba4b2aa1d24f3ca6d1422dd7a51571b987f1cdd1be7c096511a6d65e2be591a19ff0abaf8ada8a0c5e531ccb8ccc9ec687084596b38ad7b9e5c1886b05b3d797fe91f2e7866f1b650a83f1f88b9cc01d2181ae3e5102773642cdbdbfca087c625c6f53b5d06119a0c1e48aaee2ff9ef29c54338ab4db8b0b79a2cdde8a8cfea6c782e66f0a6f1d034f6e0fe987cbac5520a8c90e69caaff5c93a153e5bb0c81b7a5937367af392d8b68ceb28164f73621082e71b7db0d54f3d6500294730534623215290ae675bc1b3c9ac4a2c294cb9cb462396f895f644210c3288d3a28787d7b8ea5f1005420153b6f70a47ffda8dd0c9955d0d0667f291dbb00e6f781fe7826615d08c1a77146592fe2115e3cd7a0a4e2da8c5ae92ddf26c1e3752badc711486f498fd3f518dee60053e00162a250aa1d3ef8a781efb9eb6c4dfba751bd0b3bdd80774350b99a5325b4f21b3d7bcd52241563751255e31c1b3a9e6c2b2364259303d52f29cc2b13d1d5c2f187d651500611f6df091007490f5122f67452571d8aaa8dd7f1a8aa878460b37dbb7bbd248261e7b8dada2ccb8d99af73055d6ebf5d796da076e1f717b1e4868a7968aa8d6f696f52c4381ede08f1163e3de3012dcf182b3b185e3d4fbcc3d09cbfbc9f8ad9aeac8ab8bd3a0f581d6af573b0c692a1787a5ab9b391be0c0a5d23a532642334718708db07250c3f2eac86343b1c2e29bf69bb8da49261d71427f3d1ffcceefde4275f7d57555aadc9cf554272f46d8bab5d9b3d6d4e9e4c697c322506b1e3a5f6143b38d675b7857c7ab6c05bfd1e184f9c73804cae5bdd47a1492f6ff96e685adcc483c244b8efcb2fd1464245020490669fa946a19cef0655989fab2d7384ad2bba0c55d2ecef085c317765e321c6f6104f3cf3b1483f024410371cca584e14c3f5d63c5f9f587600555213460a4dd4d3d7411d2ec521684ebaadf492ba0cc492ca69a37183f4dadc8d0a495c12f567909bfdac6f8122e3d503e5f7008b5f78ced4436c2b1b6f4610033502f44a49a5565734f9cb3dcb1e988641cc1834223d6a4344786c4c4a53b583c572719a599c5a0cda31c7d482a44285732cc8db0dc6c0986f45327c7b4102e7335adccb6da2556187ddbe7567995f07e10adcc8eec3a56b1d4c8896509fc991361eb9fe695231d2b173653355bb0d1781a1d71573283c0b8d5d3a7e0928af3f0ceb5f30f6e15799ae92a4fe5d9406ffb9ec6a8f190b7d5fc90b7d21152c5a8f0843143dfa66b55ac90f396791781e0127064085e3b450cdbb5c3b7681a06675b3999f8f587dee05c1aef8ec3af6112a1c41a26527d086dacc2e58423412a467b1ec188523ce69273015c3d00625637aedcb28c3509cfe07e13a2cddcb893e6e28e4d28a29ccc7b5fe2cda4f8e6fef4919f72600559
</metadata>
//---------------------------------------------------
// Project: ARSI
// Language: MQL4
// Type: Indicator
// Author: 
// Company: 
// Copyright: 
// Created: 16.12.2009
//---------------------------------------------------
#property indicator_separate_window
#property indicator_buffers 1
#property indicator_color1 DodgerBlue

extern int ARSIPeriod = 14;

//---- buffers 
double ARSI[]; 
double adrsiup[];
double adrsidn[];
int init()
{ 
	string short_name = "ARSI (" + ARSIPeriod + ")";

	SetIndexStyle(0,DRAW_LINE); 
	SetIndexBuffer(0,ARSI); 
	
	return(0); 
} 

int start() 
{ 
	int i, counted_bars = IndicatorCounted(); 
	int limit;

	if(Bars <= ARSIPeriod) 
		return(0);

	if(counted_bars < 0)
	{
		return;
	}
	
	if(counted_bars == 0)
	{
		limit = Bars;
	}
	if(counted_bars > 0)
	{
		limit = Bars - counted_bars;
	}
	
	double sc;
	for(i = limit; i >= 0; i--)
	{
		sc = MathAbs(iRSI(NULL, 0, ARSIPeriod, PRICE_CLOSE, i)/100.0 - 0.5) * 2.0;

		if( Bars - i <= ARSIPeriod)
			ARSI[i] = Close[i];
		else		
			ARSI[i] = ARSI[i+1] + sc * (Close[i] - ARSI[i+1]);
	}

	return(0); 
} 