using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using PTLRuntime.NETScript;

namespace dfhah
{
    /// <summary>
    /// dfhah
    /// 
    /// </summary>
    public class dfhah : NETStrategy
    {
        public dfhah()
            : base()
        {
			#region // Initialization
            base.Author = "";
            base.Comments = "";
            base.Company = "";
            base.Copyrights = "";
            base.DateOfCreation = "30.10.2012";
            base.ExpirationDate = 0;
            base.Version = "1.0";
            base.Password = "66b4a6416f59370e942d353f08a9ae36";
            base.ProjectName = "dfhah";
            #endregion 


        }
        
        /// <summary>
        /// This function will be called after creating
        /// </summary>
		public override void Init()
		{
		
		}        
 
        /// <summary>
        /// Entry point. This function is called when new quote comes 
        /// </summary>
        public override void OnQuote()
        {
		    //1)Обычный оператор----------------------------------------------------------
//			for(int i=0; i<10; i++){
//		    	platform.Print(i," =AAA");
//		    	}
			//---------------------------------------------------------- 
		    //2)Без фигурных скобок----------------------------------------------------------
//		   for(int ff=-10; ff<0; ff++) platform.Alert(ff);
			//---------------------------------------------------------- 
			//3)Отсутствует Выражение_1---------------------------------------------------------- 
//			int FF=0;
//			for(; FF!=10; FF++){
//		    	platform.Print(FF," =AAA");}
			//---------------------------------------------------------- 
			//4)Отсутствует Условие---------------------------------------------------------- 
//			for(int h45=5;;h45++){platform.Comment(h45);if(h45>10) break;}
		    //---------------------------------------------------------- 
		    //5)Отсутств. Выражения и Условие. Вложенный while---------------------------------------------------------- 
//		    int i=0;
//			for(;;){
//		    	while(i<100){
//		        	platform.Print(i,"paff");
//		        	i++;
//		        	}
//		        	break;
//		    	}
		    //---------------------------------------------------------- 
		    //6)Дана последовательность целых чисел: 1 2 3 4 5 6 7 8 9 10 11 ...Составить программу, вычисляющую сумму элементов этой последовательности, начиная с номера N1, заканчивая номером N2.---------------------------------------------------------- 
//		    int
//		   Nom_1,                               // Номер первого элемента
//		   Nom_2,                               // Номер второго элемента
//		   Sum,                                 // Сумма чисел
//		   i;                                   // Формальн параметр (счётчик)
//		   Nom_1=3;                              // Задаём численное значение
//		   Nom_2=7;                              // Задаём численное значение
//		   for(i=Nom_1; i<=Nom_2; i++)           // Заголовок оператора цикла
//		     {                                   // Скобка начала тела цикла
//		      Sum=Sum + i;                       // Сумма накапливается
//		      platform.Alert("i=",i,"  Sum=",Sum);        // Сообщение на экран
//		     }                                   // Скобка конца тела цикла
//		   platform.Alert("После выхода из цикла i=",i,"  Sum=",Sum);// Вывод на экран
			//---------------------------------------------------------- 
			//7)Обработка double в усолвии. И switch внутри цыкла---------------------------------------------------------- 
//			double qwe=0;
//			for(double i=0; i<100; i++){
//		    	qwe=qwe+i;
//		    	platform.Print(qwe);
//		    	switch (qwe)
//				{
//				    case 6: 
//				        platform.Print("Case 1");
//				        break;
//				    case 10:
//				        platform.Print("Case 2");
//				        break;
//				    default:
//				        platform.Print("Default case");
//				        break;
//					}
//		    	}
			//---------------------------------------------------------- 
			//8)2 уровень вложности---------------------------------------------------------- 
			int q4q=1;
			for(int i=0; i<10; i+=2){
		    	platform.Print(i);
		    	if(i+q4q!=0 || i+q4q-(i+q4q)%2==q4q){
		    		for(int y=10; y<=12; y++){
		        		platform.Print("~!@#$%^&*()_+");
		        		}
		    		}
		    	}
			//----------------------------------------------------- 
			//9)3 уровень вложности---------------------------------------------------------- 
//			double g=0,gg=0,h=0,hh=0,t=0,tt=0;
//			for(int i=0; i<10; i++){
//		    	g=platform.AccountEquity();
//		    	gg=gg+g;
//		    	for(int j=10; j<20; j++){
//		        	h=platform.AccountEquity();
//		    		hh=hh+h;
//		        	for(int k=0; k>-10; k--){
//			        	t=platform.AccountEquity();
//			    		tt=tt+t;
//		        		}
//		        	}	
//		    	}
//		    	platform.Print((gg+hh/10+tt/100)/30);  //Результат должен быть равен начальному балансу
			//----------------------------------------------------- 
			//10)Выводит квадраты чисел от 2 до 10----------------------------------------------------------
//			int x=2;
//			for(;;)
//			  {
//			   platform.Print(system.MathPow(x,2));
//			   x++;
//			   if(x>10) break;
//			  }
		  	//----------------------------------------------------- 
		//----------------------------------------------------- 
		//11)Инкремент и декримент, несколько условий и выражений----------------------------------------------------------
//		for(int i=0, j=0;i>-10 || j<10;i--, j++)
//			{
//    		platform.Print(i, " ", j);
//    		}
		//----------------------------------------------------- 
		//12) Не инкремент и не дикремент.---------------------------------------------------------------------------------
//        for(int y=1;y<100; y*=2){
//            platform.Print(y);
//            }
		//----------------------------------------------------- 
		//13) bool условия.---------------------------------------------------------------------------------
//		bool u=true;
//        for(int g=0; u==true; g++){
//            platform.Print(g);
//            if(g>=10) u=false;
//            }
	
		  return;
        } 
        /// <summary>
        /// This function will be called before removing
        /// </summary>
		public override void Complete()
		{
			
		} 
     }
}
